<?php
/* $Id: node_checkout.module,v 1.0 2008/04/08 18:33:45 StickyTouch.com Exp $ */

/**
 * @file
 * This module provides a "check out" mechanism for safe node editing by multiple users
 */

/**
 * Implementation of hook_perm().
 */
function node_checkout_perm() {
  return array('node checkout override');
}

/**
 * Implementation of hook_menu().
 */
function node_checkout_menu($may_cache) {
  $items = array();
  if($may_cache) {
    $items[] = array(
      'access'             => user_access('administer content types'),
      'callback'           => 'drupal_get_form',
      'callback arguments' => array('node_checkout_settings'),
      'description'        => t('Configure Node Checkout options.'),
      'path'               => 'admin/settings/node_checkout',
      'title'              => t('Node Checkout'),
    );
   }
//   else{
//    }
  
  return $items;
}


/**
 * Configures the node_checkout module; system_settings_form().
 */
function node_checkout_settings() {
  $form = array();
  
  $form['node_checkout_general']['node_checkout_types'] = array(
    '#type'          => 'checkboxes',
    '#multiple'      => true,
    '#required'      => true,
    '#options'       => node_get_types('names'),
    '#default_value' => _node_checkout_get_content_types(),
    '#title'         => t('Node Checkout node types'),
    '#description'   => t('Select the node types that will be maintained by Node Checkout.'),
  );

  return system_settings_form($form);
}





/**
 * Gets a list of node types configured for "Node Checkout".
 */
function _node_checkout_get_content_types(){
  static $tn_types;
  if(!$tn_types){
   $tn_types = array();
   $types = variable_get('node_checkout_types', FALSE);
   if($types){
    foreach($types as $type => $ison){
      if( $ison ) {
       $tn_types[] = $ison;
       }
      }
    }
   }
  return $tn_types;
}

/**
 * Is a $node type under control of checkin/checkout mechanism
 */
function _node_checkout_is_nodetype($type) {
  if( is_object($type) ) $type = $type->type;
  return in_array($type, _node_checkout_get_content_types(), TRUE);
}


/**
 * Access callback for checkout.
 */
function _node_checkout_can_checkout(&$node) {
  return ( _node_checkout_is_nodetype($node) &&
           ( !node_lock_is_locked($node) || node_lock_is_locked_by_user($node) )
         );
}

/**
 * Access callback for checkin.
 */
function _node_checkout_can_checkin(&$node) {
  return ( _node_checkout_is_nodetype($node) &&
           node_lock_is_locked_by_user($node)
         );
}


/**
 * Implementation of hook_form_alter()
 */
function node_checkout_form_alter($form_id, &$form) {

  if( $form['#id'] == 'node-form' && _node_checkout_is_nodetype($form['#node']->type) ) {
   if( $form['#node']->nid ) {
    // Add the Cancel button for releasing the Checkout-Lock
    $form['cancel'] = array('#type' => 'button', '#value' => t('Cancel'), '#weight' => 50);
    }
   }
}

/**
 * Implementation of hook_nodeapi().
 *
 * - "delete", "insert", and "update":
 * The module must track the access status of the node.
 */
function node_checkout_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
//   drupal_set_message('node_checkout_nodeapi: $op: '.$op.'; node: '.print_r($node, TRUE));

  if( _node_checkout_is_nodetype($node) ){
   switch ($op) {
    case 'update':
      node_checkout_checkin($node);
      break;
    case 'prepare':
      if( !$GLOBALS['_POST'] ){
       if( _node_checkout_can_checkout($node) || (arg(3) == 'override' && user_access('node checkout override') ) ){
        node_checkout_checkout($node);
        }
       else{
        drupal_set_message('This file is checked-out by another user, please try again later.', 'error');
        if( user_access('node checkout override') ){
         drupal_set_message('You may override the current user and edit this file by clicking '.l('here', 'node/'.$node->nid.'/edit/override').'.  Please keep in mind that the other user that is editing this page will loose their changes!', 'error');
         }
        drupal_goto('node/'.$node->nid );
        }
       }
      break;
    case 'validate':
      if( $node->nid ){
       if( _node_checkout_can_checkin( $a3['#node'] ) ){
        if( $a3['#post']['op'] == 'Cancel'){
         node_checkout_checkin($node);
         drupal_goto('node/'.$node->nid );
         }
        }
       else{
        form_set_error('title', 'This file is Checked out by another user, it could not be saved.');
        }
       }
      break;
    }
  }
}


/**
 * Checkout (Lock) node $node.
 */
function node_checkout_checkout($node) {
  global $user;
  $node->locked = 1;
  $node->lock_log = t('Checked out by '.check_plain($user->name) );
  node_lock_set_lock_status($node);
  // drupal_set_message('Checked out: '. check_plain($node->title) );
}

/**
 * Checkin (Unlock) node $node.
 */
function node_checkout_checkin($node) {
  global $user;
  $node->locked = 0;
  node_lock_set_lock_status($node);
  // drupal_set_message('Checked in: '. check_plain($node->title) );
}




function phptemplate_node_form($form) {
  $output = "\n<div class=\"node-form\">\n";

  // Admin form fields and submit buttons must be rendered first, because
  // they need to go to the bottom of the form, and so should not be part of
  // the catch-all call to drupal_render().
  $admin = '';
  if (isset($form['author'])) {
    $admin .= "    <div class=\"authored\">\n";
    $admin .= drupal_render($form['author']);
    $admin .= "    </div>\n";
  }
  if (isset($form['options'])) {
    $admin .= "    <div class=\"options\">\n";
    $admin .= drupal_render($form['options']);
    $admin .= "    </div>\n";
  }
  $buttons = drupal_render($form['preview']);
  $buttons .= drupal_render($form['submit']);
  $buttons .= isset($form['delete']) ? drupal_render($form['delete']) : '';
  $buttons .= isset($form['cancel']) ? drupal_render($form['cancel']) : '';

  // Everything else gets rendered here, and is displayed before the admin form
  // field and the submit buttons.
  $output .= "  <div class=\"standard\">\n";
  $output .= drupal_render($form);
  $output .= "  </div>\n";

  if (!empty($admin)) {
    $output .= "  <div class=\"admin\">\n";
    $output .= $admin;
    $output .= "  </div>\n";
  }
  $output .= $buttons;
  $output .= "</div>\n";

  return $output;
}












